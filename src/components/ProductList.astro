---
interface Product {
    id: number;
    title: string;
    price: number;
    image: string;
    description: string;
}
---


<template id="product-list-template">
    <div class="window product-list-window" id="productWindow">
        <div class="title-bar" id="dragHandle">
            <div class="title-bar-text">Productos Disponibles</div>
            <div class="title-bar-controls">
                <button aria-label="Minimize" id="minimizeBtn"></button>
                <button aria-label="Maximize" id="maximizeBtn"></button>
                <button aria-label="Close" id="closeBtn"></button>
            </div>
        </div>
        <div class="window-body product-list-window-body">
            <div id="productsGrid"></div>
        </div>
        <div class="resize-handle"></div>
    </div>
</template>

<script>
import { WindowControls } from '../scripts/WindowControls';

class ProductList extends HTMLElement {
    constructor() {
        super();
        if (!this.closest('template')) {
            this.initialize();
        }
    }

    async initialize() {
        const template = document.getElementById('product-list-template') as HTMLTemplateElement;
        if (!template) {
            // If template isn't available yet, wait for it
            await new Promise(resolve => setTimeout(resolve, 0));
            this.initialize();
            return;
        }

        const content = template.content.cloneNode(true) as DocumentFragment;
        this.appendChild(content);

        // Create taskbar item
        const taskbarItems = document.getElementById('taskbarItems');
        const taskbarItem = document.createElement('button');
        taskbarItem.className = 'taskbar-item active';
        taskbarItem.innerHTML = `
            <img src="/assets/product-search.png" alt="Products" width="16" height="16">
            Productos Disponibles
        `;
        taskbarItems?.appendChild(taskbarItem);

        // Initialize window controls
        const productWindow = this.querySelector('#productWindow') as HTMLElement;
        new WindowControls(productWindow, taskbarItem);

        this.loadProducts();
    }

    private async loadProducts() {
        try {
            const response = await fetch('https://fakestoreapi.com/products');
            const products = await response.json();
            this.displayProducts(products);
        } catch (error) {
            const event = new CustomEvent('showMessage', {
                detail: {
                    type: 'error',
                    title: 'Error',
                    content: 'Error al cargar los productos',
                    button: 'Aceptar'
                }
            });
            document.dispatchEvent(event);
        }
    }

    private displayProducts(products: any[]) {
        const grid = this.querySelector('#productsGrid');
        if (!grid) return;

        const formatter = new Intl.NumberFormat('es-AR', {
            style: 'currency',
            currency: 'ARS',
            minimumFractionDigits: 2
        });

        grid.innerHTML = products.map(product => `
            <div class="product-card">
                <img src="${product.image}" alt="${product.title}">
                <div class="product-info">
                    <h4>${product.title}</h4>
                    <p class="product-id" title="Doble click para copiar">ID: ${product.id}</p>
                    <p class="price">${formatter.format(product.price)}</p>
                </div>
                <div class="product-actions">
                    <button class="add-to-cart-button" data-product-id="${product.id}">Agregar al Carrito</button>
                </div>
            </div>
        `).join('');

        // Add click handlers for copying IDs and adding to cart
        grid.querySelectorAll('.product-id').forEach(el => {
            el.addEventListener('dblclick', (e) => {
                const id = (e.target as HTMLElement).textContent?.split(':')[1].trim();
                navigator.clipboard.writeText(id || '');
            });
        });

        grid.querySelectorAll('.add-to-cart-button').forEach(button => {
            button.addEventListener('click', async (e) => {
                const productId = (e.target as HTMLElement).getAttribute('data-product-id');
                if (!productId) return;

                // Get current cart
                const savedCart = localStorage.getItem('cart');
                const cart = savedCart ? JSON.parse(savedCart) : [];
                
                // Find product in cart and product details
                const existingItem = cart.find((item: any) => item.id === Number(productId));
                const product = products.find(p => p.id === Number(productId));
                
                if (existingItem) {
                    existingItem.quantity += 1;
                } else {
                    cart.push({ ...product, quantity: 1 });
                }
                
                // Save updated cart
                localStorage.setItem('cart', JSON.stringify(cart));

                // Find Store component and trigger cart reload
                const storeWindow = document.querySelector('store-window');
                if (storeWindow) {
                    (storeWindow as any).loadCart();
                }
                
                // Show message box
                const event = new CustomEvent('showMessage', {
                    detail: {
                        type: 'info',
                        title: 'Producto Agregado',
                        content: `Se agreg√≥ ${product.title} al carrito.<br>Cantidad actual: ${existingItem ? existingItem.quantity + 1 : 1}`,
                        button: 'Aceptar',
                        link: ''
                    }
                });
                document.dispatchEvent(event);
            });
        });
    }
}

// Define the custom element if it hasn't been defined yet
if (!customElements.get('product-list')) {
    customElements.define('product-list', ProductList);
}
</script>

<style>

</style> 